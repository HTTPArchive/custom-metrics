/**
 * IMPORTANT: Do not modify this file directly! It is generated by
 *   bin/library-detector.js
 *
 * Detects the presence of third party libraries.
 *
 * Look for common library aliases on the global scope.
 * If available, detect libraries' versions.
 * Built on https://github.com/johnmichel/Library-Detector-for-Chrome.
 *
 * Outputs JSON-serialized list of library-version pairs.
 *     e.g.: `[{name: "a", version: "1.0"},{name: "b", version: null}]`
 */
var UNKNOWN_VERSION = null; var d41d8cd98f00b204e9800998ecf8427e_LibraryDetectorTests = { 'GWT': { id: 'gwt', test: function(win) { var doc = win.document, hasHistFrame = doc.getElementById('__gwt_historyFrame'), hasGwtUid = doc.gwt_uid, hasBodyListener = doc.body.__listener, hasBodyEventBits = doc.body.__eventBits, hasModules = win.__gwt_activeModules, hasJsonP = win.__gwt_jsonp__, hasRootWinApp = win.__gwt_scriptsLoaded || win.__gwt_stylesLoaded || win.__gwt_activeModules; if(hasHistFrame || hasGwtUid || hasBodyListener || hasBodyEventBits || hasModules || hasJsonP || hasRootWinApp) { var frames = doc.getElementsByTagName('iframe'), gwtVersion = UNKNOWN_VERSION; for(var n=0; n<frames.length; n++) { try { var hasNegativeTabIndex = frames[n].tabIndex < 0; if(hasNegativeTabIndex && frames[n].contentWindow && frames[n].contentWindow.$gwt_version) { gwtVersion = frames[n].contentWindow.$gwt_version; break; } } catch(e) {} } if(gwtVersion=='0.0.999') { gwtVersion = 'Google Internal'; } return { version: gwtVersion }; } return false; } }, 'Ink': { id: 'ink', test: function(win) { if (win.Ink && win.Ink.createModule) { return { version: UNKNOWN_VERSION }; } return false; } }, 'Vaadin': { id: 'vaadin', test: function(win) { if (win.vaadin && win.vaadin.registerWidgetset) { return { version: UNKNOWN_VERSION }; } return false; } }, 'Bootstrap': { id: 'bootstrap', npm: 'bootstrap', test: function(win) { var jQueryAvailable = win.$ && win.$.fn, RE_PREFIX_V2 = '\\$this\\.data\\((?:\'|")', RE_PREFIX_V3 = '\\$this\\.data\\((?:\'|")(?:bs\\.){1}', bootstrapComponents = [ 'affix', 'alert', 'button', 'carousel', 'collapse', 'dropdown', 'modal', 'popover', 'scrollspy', 'tab', 'tooltip' ]; if(jQueryAvailable) { var bootstrapVersion; bootstrapComponents.some(function(component) { if(win.$.fn[component]) { if(win.$.fn[component].Constructor && win.$.fn[component].Constructor.VERSION) { bootstrapVersion = win.$.fn[component].Constructor.VERSION; return true; } else if(new RegExp(RE_PREFIX_V3 + component).test(win.$.fn[component].toString())) { bootstrapVersion = '>= 3.0.0 & <= 3.1.1'; return true; } else if(new RegExp(RE_PREFIX_V2 + component).test(win.$.fn[component].toString())) { bootstrapVersion = '>= 2.0.0 & <= 2.3.2'; return true; } } return false; }); if (bootstrapVersion) { return { version: bootstrapVersion }; } } return false; } }, 'Zurb': { id: 'zurb', npm: 'foundation-sites', test: function(win) { if(win.Foundation && win.Foundation.Toggler) { return { version: win.Foundation.version || UNKNOWN_VERSION }; } return false; } }, 'Polymer': { id: 'polymer', npm: '@polymer/polymer', test: function(win) { if(win.Polymer && win.Polymer.dom) { return { version: win.Polymer.version || UNKNOWN_VERSION }; } return false; } }, 'LitElement': { id: 'litelement', npm: 'lit-element', test: function(win) { if(win.litElementVersions && win.litElementVersions.length) { var versions = [...win.litElementVersions].sort( (a, b) => a.localeCompare(b, undefined, { numeric:true }) ); return { version: versions[versions.length - 1] }; } return false; } }, 'Highcharts': { id: 'highcharts', npm: 'highcharts', test: function(win) { if(win.Highcharts && win.Highcharts.Point) { return { version: win.Highcharts.version || UNKNOWN_VERSION }; } return false; } }, 'InfoVis': { id: 'jit', test: function test(win) { if(win.$jit && win.$jit.PieChart) { return { version: win.$jit.version || UNKNOWN_VERSION }; } return false; } }, 'FlotCharts': { id: 'flotcharts', npm: 'flot', test: function(win) { if(win.$ && win.$.plot) { return { version: win.$.plot.version || UNKNOWN_VERSION}; } return false; } }, 'CreateJS': { id: 'createjs', npm: 'createjs', test: function(win) { if(win.createjs && win.createjs.promote) { return { version: UNKNOWN_VERSION}; } return false; } }, 'Google Maps': { id: 'gmaps', test: function(win) { if (win.google && win.google.maps) { return { version: win.google.maps.version || UNKNOWN_VERSION }; } return false; } }, 'jQuery': { id: 'jquery', npm: 'jquery', test: function(win) { var jq = win.jQuery || win.$; if (jq && jq.fn && jq.fn.jquery) { return { version: jq.fn.jquery.replace(/[^\d+\.+]/g, '') || UNKNOWN_VERSION}; } return false; } }, 'jQuery (Fast path)': { id: 'jquery-fast', npm: 'jquery', test: function (win) { var jq = win.jQuery || win.$; if (jq && jq.fn) { return { version: UNKNOWN_VERSION }; } return false; } }, 'jQuery UI': { id: 'jquery_ui', npm: 'jquery-ui', test: function(win) { var jq = win.jQuery || win.$ || win.$jq || win.$j; if(jq && jq.fn && jq.fn.jquery && jq.ui) { var plugins = 'accordion,datepicker,dialog,draggable,droppable,progressbar,resizable,selectable,slider,menu,grid,tabs'.split(','), concat = []; for (var i=0; i < plugins.length; i++) { if(jq.ui[plugins[i]]) concat.push(plugins[i].substr(0,1).toUpperCase() + plugins[i].substr(1)); } return { version: jq.ui.version || UNKNOWN_VERSION, details: concat.length ? 'Plugins used: '+concat.join(',') : '' }; } return false; } }, 'Dojo': { id: 'dojo', npm: 'dojo', test: function(win) { if(win.dojo && win.dojo.delegate) { var version = win.dojo.version ? win.dojo.version.toString() : UNKNOWN_VERSION; return { version: version, details: 'Details: '+(win.dijit ? 'Uses Dijit' : 'none') }; } return false; } }, 'Prototype': { id: 'prototype', test: function(win) { if(win.Prototype && win.Prototype.BrowserFeatures) { return { version: win.Prototype.Version || UNKNOWN_VERSION }; } return false; } }, 'Scriptaculous': { id: 'scriptaculous', test: function(win) { if(win.Scriptaculous && win.Scriptaculous.load) { return { version: win.Scriptaculous.Version || UNKNOWN_VERSION }; } return false; } }, 'MooTools': { id: 'mootools', test: function(win) { if(win.MooTools && win.MooTools.build) { return { version: win.MooTools.version || UNKNOWN_VERSION }; } return false; } }, 'Spry': { id: 'spry', test: function(win) { if (win.Spry && win.Spry.Data) { return { version: UNKNOWN_VERSION }; } return false; } }, 'YUI 2': { id: 'yui', test: function(win) { if (win.YAHOO && win.YAHOO.util) { return { version: win.YAHOO.VERSION || UNKNOWN_VERSION }; } return false; } }, 'YUI 3': { id: 'yui3', npm: 'yui', test: function(win) { if (win.YUI && win.YUI.Env) { return { version: win.YUI.version || UNKNOWN_VERSION }; } return false; } }, 'Qooxdoo': { id: 'qooxdoo', npm: 'qooxdoo', test: function(win) { if(win.qx && win.qx.Bootstrap) { return { version: UNKNOWN_VERSION }; } return false; } }, 'Ext JS': { id: 'extjs', test: function(win) { if (win.Ext && win.Ext.versions) { return { version: win.Ext.versions.core.version }; } else if(win.Ext) { return { version: win.Ext.version || UNKNOWN_VERSION }; } return false; } }, 'base2': { id: 'base2', test: function(win) { if(win.base2 && win.base2.dom) { return { version: win.base2.version || UNKNOWN_VERSION }; } return false; } }, 'Closure Library': { id: 'closure', npm: 'google-closure-library', test: function(win) { if(win.goog && win.goog.provide) { return { version: UNKNOWN_VERSION }; } return false; } }, 'Rapha&euml;l': { id: 'raphael', test: function(win) { if (win.Raphael && win.Raphael.circle) { return { version: win.Raphael.version || UNKNOWN_VERSION }; } return false; } }, 'React': { id: 'react', npm: 'react', test: function(win) { function isMatch(node) { return node!=null && node._reactRootContainer!=null; } function nodeFilter(node) { return isMatch(node) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP; } var reactRoot = document.getElementById('react-root'); var altHasReact = document.querySelector('*[data-reactroot]'); var bodyReactRoot = isMatch(document.body) || isMatch(document.body.firstElementChild); var hasReactRoot = bodyReactRoot|| document.createTreeWalker(document.body, NodeFilter.SHOW_ELEMENT, nodeFilter).nextNode() != null; if (hasReactRoot || reactRoot && reactRoot.innerText.length > 0 || altHasReact || win.React && win.React.Component) { return { version: win.React && win.React.version || UNKNOWN_VERSION }; } return false; } }, 'React (Fast path)': { id: 'react-fast', npm: 'react', test: function (win) { function isMatch(node) { return node != null && node._reactRootContainer != null; } var reactRoot = document.getElementById('react-root'); var altHasReact = document.querySelector('*[data-reactroot]'); var hasReactRoot = isMatch(document.body) || isMatch(document.body.firstElementChild); if (hasReactRoot || reactRoot || altHasReact || win.React) { return { version: win.React && win.React.version || UNKNOWN_VERSION }; } return false; } }, 'Next.js': { id: 'next', npm: 'next', test: function(win) { if (win.__NEXT_DATA__ && win.__NEXT_DATA__.buildId) { return { version: window.next && window.next.version || UNKNOWN_VERSION }; } return false; } }, 'Next.js (Fast path)': { id: 'next-fast', npm: 'next', test: function (win) { if (win.__NEXT_DATA__) { return { version: UNKNOWN_VERSION }; } return false; } }, 'Preact': { id: 'preact', npm: 'preact', test: function(win) { var expando = typeof Symbol!='undefined' && Symbol.for && Symbol.for('preactattr'); function isMatch(node) { if ('__k' in node && 'props' in node.__k && 'type' in node.__k) { return true; } return '_component' in node || '__preactattr_' in node || expando && node[expando]!=null; } function getMatch(node) { return node!=null && isMatch(node) && node; } function nodeFilter(node) { return isMatch(node) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP; } var preactRoot = getMatch(document.body) || getMatch(document.body.firstElementChild); if (!preactRoot) { preactRoot = document.createTreeWalker(document.body, NodeFilter.SHOW_ELEMENT, nodeFilter).nextNode(); } if (preactRoot || win.preact) { var version = UNKNOWN_VERSION; if (preactRoot) { if ('__k' in preactRoot) { version = '10'; } if ('__preactattr_' in preactRoot) { version = '8'; } if (expando && preactRoot[expando]!=null) { version = '7'; } } return { version: version }; } return false; } }, 'Preact (Fast path)': { id: 'preact-fast', npm: 'preact', test: function (win) { var version = UNKNOWN_VERSION; function isMatch(node) { if (node.__k != null) { version = '10'; return true; } return node._component != null || node.__preactattr_ != null; } function getMatch(node) { return node != null && isMatch(node); } var preactRoot = getMatch(document.body) || getMatch(document.body.firstElementChild); if (preactRoot || win.preact) { return { version: version }; } return false; } }, 'Modernizr': { id: 'modernizr', npm: 'modernizr', test: function(win) { if (win.Modernizr && win.Modernizr.addTest) { return { version: win.Modernizr._version || UNKNOWN_VERSION }; } return false; } }, 'Processing.js': { id: 'processingjs', npm: 'processing-js', test: function(win) { if(win.Processing && win.Processing.box) { return { version: Processing.version || UNKNOWN_VERSION }; } return false; } }, 'Backbone': { id: 'backbone', npm: 'backbone', test: function(win) { if (win.Backbone && win.Backbone.Model.extend) { return {version: win.Backbone.VERSION || UNKNOWN_VERSION}; } return false; } }, 'Leaflet': { id: 'leaflet', npm: 'leaflet', test: function(win) { if (win.L && win.L.GeoJSON && (win.L.marker || win.L.Marker)) { return { version: win.L.version || win.L.VERSION || UNKNOWN_VERSION }; } return false; } }, 'Mapbox': { id: 'mapbox', npm: 'mapbox-gl', test: function(win) { if (win.L && win.L.mapbox && win.L.mapbox.geocoder) { return { version: win.L.mapbox.VERSION || UNKNOWN_VERSION }; } return false; } }, 'Lo-Dash': { id: 'lodash', npm: 'lodash', test: function(win) { var _ = typeof (_ = win._) == 'function' && _, chain = typeof (chain = _ && _.chain) == 'function' && chain, wrapper = (chain || _ || function() { return {}; })(1); if (_ && wrapper.__wrapped__) { return { version: _.VERSION || UNKNOWN_VERSION }; } return false; } }, 'Underscore': { id: 'underscore', npm: 'underscore', test: function(win) { if (win._ && typeof win._.tap === 'function' && !d41d8cd98f00b204e9800998ecf8427e_LibraryDetectorTests['Lo-Dash'].test(win)) { return {version: win._.VERSION || UNKNOWN_VERSION}; } return false; } }, 'Sammy': { id: 'sammy', test: function(win) { if (win.Sammy && win.Sammy.Application.curry) { return {version: win.Sammy.VERSION || UNKNOWN_VERSION}; } return false; } }, 'Rico': { id: 'rico', test: function(win) { if (win.Rico && window.Rico.checkIfComplete) { return {version: win.Rico.Version || UNKNOWN_VERSION}; } return false; } }, 'MochiKit': { id: 'mochikit', test: function(win) { if (win.MochiKit && win.MochiKit.Base.module) { return {version: MochiKit.VERSION || UNKNOWN_VERSION}; } return false; } }, 'gRapha&euml;l': { id: 'graphael', test: function(win) { if (win.Raphael && win.Raphael.fn.g) { return {version: UNKNOWN_VERSION}; } return false; } }, 'Glow': { id: 'glow', test: function(win) { if (win.gloader && win.gloader.getRequests) { return {version: UNKNOWN_VERSION}; } else if (win.glow && win.glow.dom) { return {version: win.glow.VERSION || UNKNOWN_VERSION}; } else if (win.Glow) { return {version: win.Glow.version || UNKNOWN_VERSION}; } return false; } }, 'Socket.IO': { id: 'socketio', npm: 'socket.io', test: function(win) { if (win.io && (win.io.sockets || win.io.Socket)) { return {version: win.io.version || UNKNOWN_VERSION}; } return false; } }, 'Mustache': { id: 'mustache', npm: 'mustache', test: function(win) { if (win.Mustache && win.Mustache.to_html) { return {version: win.Mustache.version || UNKNOWN_VERSION}; } return false; } }, 'Fabric.js': { id: 'fabricjs', npm: 'fabric', test: function(win) { if (win.fabric && win.fabric.util) { return {version: win.fabric.version || UNKNOWN_VERSION}; } return false; } }, 'FuseJS': { id: 'fusejs', npm: 'fuse.js', test: function(win) { if (win.Fuse) { return {version: UNKNOWN_VERSION}; } return false; } }, 'Tween.js': { id: 'tweenjs', npm: 'tween.js', test: function(win) { if (win.TWEEN && win.TWEEN.Easing) { return {version: UNKNOWN_VERSION}; } return false; } }, 'SproutCore': { id: 'sproutcore', test: function(win) { if (win.SC && win.SC.Application) { return {version: UNKNOWN_VERSION}; } return false; } }, 'Zepto.js': { id: 'zepto', npm: 'zepto', test: function(win) { if (win.Zepto && win.Zepto.fn) { return {version: UNKNOWN_VERSION}; } return false; } }, 'three.js': { id: 'threejs', npm: 'three', test: function(win) { if (win.THREE && win.THREE.REVISION) { return {version: 'r' + win.THREE.REVISION}; } else if (win.THREE) { return {version: UNKNOWN_VERSION}; } return false; } }, 'PhiloGL': { id: 'philogl', npm: 'philogl', test: function(win) { if (win.PhiloGL && win.PhiloGL.Camera) { return {version: win.PhiloGL.version || UNKNOWN_VERSION}; } return false; } }, 'CamanJS': { id: 'camanjs', npm: 'caman', test: function(win) { if (win.Caman && win.Caman.version) { return {version: win.Caman.version.release}; } else if (win.Caman) { return {version: UNKNOWN_VERSION}; } return false; } }, 'yepnope': { id: 'yepnope', test: function(win) { if (win.yepnope && win.yepnope.injectJs) { return {version: UNKNOWN_VERSION}; } return false; } }, 'LABjs': { id: 'labjs', test: function(win) { if (win.$LAB && win.$LAB.setOptions) { return {version: UNKNOWN_VERSION}; } return false; } }, 'Head JS': { id: 'headjs', npm: 'headjs', test: function(win) { if (win.head && win.head.js) { return {version: UNKNOWN_VERSION}; } return false; } }, 'ControlJS': { id: 'controljs', test: function(win) { if (win.CJS && win.CJS.start) { return {version: UNKNOWN_VERSION}; } return false; } }, 'RequireJS': { id: 'requirejs', npm: 'requirejs', test: function(win) { var req = win.require || win.requirejs; if (req && (req.load || (req.s && req.s.contexts && req.s.contexts._ && (req.s.contexts._.loaded || req.s.contexts._.load)))) { return { version: req.version || UNKNOWN_VERSION }; } return false; } }, 'RightJS': { id: 'rightjs', test: function(win) { if (win.RightJS && win.RightJS.isNode) { return { version: win.RightJS.version || UNKNOWN_VERSION }; } return false; } }, 'jQuery Tools': { id: 'jquerytools', test: function(win) { var jq = win.jQuery || win.$; if(jq && jq.tools) { return { version: jq.tools.version || UNKNOWN_VERSION }; } return false; } }, 'Pusher': { id: 'pusher', npm: 'pusher-js', test: function(win) { if(win.Pusher && win.Pusher.Channel) { return { version: win.Pusher.VERSION || UNKNOWN_VERSION }; } return false; } }, 'Paper.js': { id: 'paperjs', npm: 'paper', test: function(win) { if(win.paper && win.paper.Point) { return { version: win.paper.version || UNKNOWN_VERSION }; } return false; } }, 'Swiffy': { id: 'swiffy', test: function(win) { if(win.swiffy && win.swiffy.Stage) { return { version: UNKNOWN_VERSION }; } return false; } }, 'Move': { id: 'move', npm: 'move', test: function(win) { if(win.move && win.move.compile) { return { version: win.move.version() || UNKNOWN_VERSION }; } return false; } }, 'AmplifyJS': { id: 'amplifyjs', npm: 'amplifyjs', test: function(win) { if(win.amplify && win.amplify.publish) { return { version: UNKNOWN_VERSION }; } return false; } }, 'Popcorn.js': { id: 'popcornjs', test: function(win) { if (win.Popcorn && win.Popcorn.Events) { return { version: win.Popcorn.version || UNKNOWN_VERSION }; } return false; } }, 'D3': { id: 'd3', npm: 'd3', test: function(win) { if (win.d3 && win.d3.select) { return { version: win.d3.version || UNKNOWN_VERSION }; } return false; } }, 'Handlebars': { id: 'handlebars', npm: 'handlebars', test: function(win) { if(win.Handlebars && win.Handlebars.compile) { return { version: win.Handlebars.VERSION || UNKNOWN_VERSION }; } return false; } }, 'Knockout': { id: 'knockout', npm: 'knockout', test: function(win) { if (win.ko && win.ko.applyBindings) { return { version: win.ko.version || UNKNOWN_VERSION }; } return false; } }, 'Spine': { id: 'spine', test: function(win) { if (win.Spine && win.Spine.Controller) { return {version: win.Spine.version || UNKNOWN_VERSION}; } return false; } }, 'jQuery Mobile': { id: 'jquery-mobile', npm: 'jquery-mobile', test: function(win) { var jq = win.jQuery || win.$ || win.$jq || win.$j; if(jq && jq.fn && jq.fn.jquery && jq.mobile) { return { version: jq.mobile.version || UNKNOWN_VERSION }; } return false; } }, 'WebFont Loader': { id: 'webfontloader', npm: 'webfontloader', test: function(win) { if(win.WebFont && win.WebFont.load) { return { version: UNKNOWN_VERSION }; } return false; } }, 'Angular': { id: 'angular', npm: '@angular/core', test: function(win) { var ngVersion = win.document.querySelector('[ng-version]'); if (ngVersion) { return { version: ngVersion.getAttribute('ng-version') || UNKNOWN_VERSION }; } else if (win.ng && win.ng.probe instanceof Function) { return { version: UNKNOWN_VERSION }; } return false; } }, 'AngularJS': { id: 'angularjs', npm: 'angular', test: function(win) { var ng = win.angular; if(ng && ng.version && ng.version.full) { return { version: ng.version.full }; } else if (ng) { return { version: UNKNOWN_VERSION }; } return false; } }, 'Ember.js': { id: 'emberjs', npm: 'ember-source', test: function(win) { var ember = win.Ember || win.Em; if (ember && ember.GUID_KEY) { return { version: ember.VERSION || UNKNOWN_VERSION }; } return false; } }, 'Hammer.js': { id: 'hammerjs', npm: 'hammerjs', test: function(win) { if(win.Hammer && win.Hammer.Pinch) { return { version: win.Hammer.VERSION || "&lt; 1.0.10" }; } return false; } }, 'Visibility.js': { id: 'visibilityjs', npm: 'visibilityjs', test: function(win) { if(win.Visibility && win.Visibility.every) { return { version: UNKNOWN_VERSION }; } return false; } }, 'Velocity.js': { id: 'velocityjs', npm: 'velocity-animate', test: function(win) { var jq = win.jQuery || win.$, velocity = jq ? jq.Velocity : win.Velocity; if(velocity && velocity.RegisterEffect && velocity.version) { return { version: velocity.version.major + "." + velocity.version.minor + "." + velocity.version.patch }; } else if (velocity && velocity.RegisterEffect) { return { version: UNKNOWN_VERSION }; } return false; } }, 'IfVisible.js': { id: 'ifvisiblejs', npm: 'ifvisible.js', test: function(win) { var iv = win.ifvisible; if(iv && iv.__ceGUID === "ifvisible.object.event.identifier") { return { version: UNKNOWN_VERSION }; } return false; } }, 'Pixi.js': { id: 'pixi', npm: 'pixi.js', test: function(win) { var px = win.PIXI; if(px && px.WebGLRenderer && px.VERSION) { return { version: px.VERSION.replace('v', '') || UNKNOWN_VERSION }; } return false; } }, 'DC.js': { id: 'dcjs', npm: 'dc', test: function(win) { var dc = win.dc; if(dc && dc.registerChart) { return { version: dc.version || UNKNOWN_VERSION }; } return false; } }, 'GreenSock JS': { id: 'greensock', npm: 'gsap', test: function(win) { if (win.TweenMax && win.TweenMax.pauseAll) { return { version: win.TweenMax.version || UNKNOWN_VERSION }; } return false; } }, 'FastClick': { id: 'fastclick', npm: 'fastclick', test: function(win) { if(win.FastClick && win.FastClick.notNeeded) { return { version: UNKNOWN_VERSION }; } return false; } }, 'Isotope': { id: 'isotope', npm: 'isotope-layout', test: function(win) { if(win.Isotope || (win.$ != null && win.$.Isotope)) { return { version: UNKNOWN_VERSION }; } return false; } }, 'Marionette': { id: 'marionette', npm: 'backbone.marionette', test: function(win) { if(win.Marionette && win.Marionette.Application) { return { version: win.Marionette.VERSION || UNKNOWN_VERSION }; } return false; } }, 'Can': { id: 'canjs', npm: 'can', test: function (win) { if (win.can && win.can.Construct) { return { version: win.can.VERSION || UNKNOWN_VERSION }; } return false; } }, 'Vue': { id: 'vue', npm: 'vue', test: function(win) { function isVueNode(node) { return node.__vue__ != null ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP; } var hasVueNode = document.createTreeWalker(document.body, NodeFilter.SHOW_ELEMENT, isVueNode).nextNode() !== null; if (hasVueNode || win.Vue) { return { version: win.Vue && win.Vue.version || UNKNOWN_VERSION }; } return false; } }, 'Vue (Fast path)': { id: 'vue-fast', npm: 'vue', test: function (win) { if (win.Vue) { return { version: win.Vue && win.Vue.version || UNKNOWN_VERSION }; } return false; } }, 'Nuxt.js': { id: 'nuxt', npm: 'nuxt', test: function(win) { if ((win.__NUXT__ && win.__NUXT__.data != null) || win.$nuxt) { return { version: UNKNOWN_VERSION }; } return false; } }, 'Nuxt.js (Fast path)': { id: 'nuxt-fast', npm: 'nuxt', test: function (win) { if (win.__NUXT__ || win.$nuxt) { return { version: UNKNOWN_VERSION }; } return false; } }, 'Two': { id: 'two', npm: 'two.js', test: function(win) { if (win.Two && win.Two.Utils) { return { version: win.Two.Version || UNKNOWN_VERSION }; } return false; } }, 'Brewser': { id: 'brewser', npm: 'brewser', test: function(win) { if(win.BREWSER && win.BREWSER.ua) { return { version: BREWSER.VERSION || UNKNOWN_VERSION }; } return false; } }, 'Material Design Lite': { id: 'materialdesignlite', npm: 'material-design-lite', test: function(win) { if(win.componentHandler && win.componentHandler.upgradeElement) { return { version: UNKNOWN_VERSION}; } return false; } }, 'Kendo UI': { id: 'kendoui', npm: 'kendo-ui-core', test: function(win) { if (win.kendo && win.kendo.View && win.kendo.View.extend) { return {version: win.kendo.version || UNKNOWN_VERSION}; } return false; } }, 'Matter.js': { id: 'matterjs', npm: 'matter-js', test: function(win) { if (win.Matter && win.Matter.Engine) { return {version: UNKNOWN_VERSION}; } return false; } }, 'Riot': { id: 'riot', npm: 'riot', test: function(win) { if (win.riot && win.riot.mixin) { return { version: win.riot.version || UNKNOWN_VERSION }; } return false; } }, 'Sea.js': { id: 'seajs', npm: 'seajs', test: function(win) { if(win.seajs && win.seajs.use) { return { version: win.seajs.version || UNKNOWN_VERSION }; } return false; } }, 'Moment.js': { id: 'momentjs', npm: 'moment', test: function(win) { if(win.moment && (win.moment.isMoment || win.moment.lang)) { return { version: win.moment.version || UNKNOWN_VERSION }; } return false; } }, 'Moment Timezone': { id: 'moment-timezone', npm: 'moment-timezone', test: function(win) { if (win.moment && win.moment.tz) { return { version: win.moment.tz.version || UNKNOWN_VERSION }; } return false; } }, 'ScrollMagic': { id: 'scrollmagic', npm: 'scrollmagic', test: function(win) { if (win.ScrollMagic && win.ScrollMagic.Controller) { return {version: ScrollMagic.version || UNKNOWN_VERSION}; } return false; } }, 'SWFObject': { id: 'swfobject', test: function(win) { if (win.swfobject && win.swfobject.embedSWF) { return { version: win.swfobject.version || UNKNOWN_VERSION }; } else if(win.deconcept && win.deconcept.SWFObject) { return { version: UNKNOWN_VERSION }; } return false; } }, 'FlexSlider': { id: 'flexslider', npm: 'flexslider', test: function(win) { var jq = win.jQuery || win.$ || win.$jq || win.$j; if (jq && jq.fn && jq.fn.jquery && jq.flexslider){ return { version: UNKNOWN_VERSION }; } return false; } }, 'SPF': { id: 'spf', npm: 'spf', test: function(win) { if (win.spf && win.spf.init) { return { version: UNKNOWN_VERSION }; } return false; } }, 'Numeral.js': { id: 'numeraljs', npm: 'numeraljs', test: function(win) { if (win.numeral && win.isNumeral) { return { version: win.numeral.version || UNKNOWN_VERSION }; } return false; } }, 'boomerang.js': { id: 'boomerangjs', npm: 'boomerangjs', test: function(win) { if (win.BOOMR && win.BOOMR.utils && win.BOOMR.init) { return { version: win.BOOMR.version || UNKNOWN_VERSION }; } return false; } }, 'Framer': { id: 'framer', npm: 'framerjs', test: function(win) { if (win.Framer && win.Framer.Layer) { return { version: win.Framer.Version.build || UNKNOWN_VERSION }; } return false; } }, 'Marko': { id: 'marko', npm: 'marko', test: function (win) { var selector = '[data-marko-key], [data-marko]'; var markoElement = document.querySelector(selector); if (markoElement) { return { version: UNKNOWN_VERSION }; } return false; } }, 'AMP': { id: 'amp', npm: 'https://www.npmjs.com/org/ampproject', test: function (win) { var version = win.document.documentElement.getAttribute("amp-version"); return version ? { version: version } : false; } }, 'Gatsby': { id: 'gatsby', npm: 'gatsby', test: function (win) { if (document.getElementById('___gatsby')) { return { version: UNKNOWN_VERSION }; } return false; } }, 'Shopify': { id: 'shopify', npm: null, test: function (win) { if (win.Shopify && win.Shopify.shop) { return { version: UNKNOWN_VERSION }; } return false; } }, 'Magento': { id: 'magento', npm: null, test: function (win) { const reRequireScript = /\/static(?:\/version\d+)?\/frontend\/.+\/.+\/requirejs\/require(?:\.min)?\.js/; const scripts = Array.from(document.querySelectorAll('script[src]') || []); if (scripts.some(s => reRequireScript.test(s.src))) { return { version: 2 }; } return false; } }, 'WordPress': { id: 'wordpress', npm: null, test: function (win) { const hasAPILinkElem = !!document.querySelector('link[rel="https://api.w.org/"]'); const hasWPIncludes = !!document.querySelectorAll('link[href*="wp-includes"], script[src*="wp-includes"]').length; if (!hasAPILinkElem && !hasWPIncludes) return false; const generatorMeta = document.querySelector('meta[name=generator][content^="WordPress"]'); const version = generatorMeta ? generatorMeta.getAttribute("content").replace(/^\w+\s/,'') : UNKNOWN_VERSION; return { version }; } }, 'Wix': { id: 'wix', npm: null, test: function (win) { if (win.wixBiSession) { return { version: UNKNOWN_VERSION }; } return false; } }, 'Workbox': { id: 'workbox', npm: 'workbox-sw', test: async function (win) { var nav = win.navigator; if (!('serviceWorker' in nav)) { return false; } return nav.serviceWorker.getRegistration() .then(function(registration) { var scriptURL = nav.serviceWorker.controller.scriptURL; return fetch(scriptURL, { credentials: 'include', headers: { 'service-worker': 'script' } }) .then(function(response) { return response.text(); }) .then(function(scriptContent) { var workboxRegExp = /new Workbox|new workbox|workbox\.precaching\.|workbox\.strategies/gm; if (workboxRegExp.test(scriptContent)) { var semVerRegExp = /workbox.*?\b((0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(-(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*)?(\+[0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*)?)\b/gim; var matches = semVerRegExp.exec(scriptContent); var version = UNKNOWN_VERSION; if (Array.isArray(matches) && matches.length > 1 && matches[1]) { version = matches[1]; } return { version: version }; } return false; }); }).catch(function(exception) { return false; }); } }, 'Boq': { id: 'boq', npm: null, test: function (win) { if (win.WIZ_global_data) { return { version: UNKNOWN_VERSION }; } return false; } }, 'Wiz': { id: 'wiz', npm: null, test: function (win) { if (document.__wizdispatcher) { return { version: UNKNOWN_VERSION }; } return false; } }, 'core-js': { id: 'corejs', npm: 'core-js', test: function (win) { const shared = win['__core-js_shared__']; const core = win.core; if (shared) { const versions = shared.versions; return { version: Array.isArray(versions) ? versions.map(it => `core-js-${ it.mode }@${ it.version }`).join('; ') : UNKNOWN_VERSION }; } else if (core) { return { version: core.version || UNKNOWN_VERSION }; } return false; } }, 'Drupal': { id: 'drupal', npm: null, test: function (win) { const generatorMeta = document.querySelector('meta[name="generator"][content^="Drupal"]'); const version = generatorMeta ? generatorMeta.getAttribute("content").replace(/\D+/gi,'') : UNKNOWN_VERSION; const resDrupal = /\/sites\/(?:default|all)\/(?:themes|modules|files)/; const res = Array.from(document.querySelectorAll('link,style,script') || []); if (res.some(s => resDrupal.test(s.src)) || res.some(s => resDrupal.test(s.href)) || generatorMeta || (win.Drupal && win.Drupal.behaviors)) { return { version }; } return false; } }, 'TYPO3': { id: 'typo3', npm: null, test: function (win) { const generatorMeta = document.querySelector('meta[name="generator"][content^="TYPO3"]'); const resourcesTYPO3 = /\/(typo3conf|typo3temp|fileadmin)/; const res = Array.from(document.querySelectorAll('link,style,script') || []); if (generatorMeta || res.some(s => resourcesTYPO3.test(s.src)) || res.some(s => resourcesTYPO3.test(s.href))) { return { version: UNKNOWN_VERSION }; } return false; } }, 'Create React App': { id: 'create-react-app', npm: 'react-scripts', test: function (win) { let child = win.document.body.firstElementChild; let noscript, root; do { if (child.localName === 'noscript') noscript = child; else if (child.id === 'root') root = child; } while (child = child.nextElementSibling); if (root && noscript && /You need to enable JavaScript to run this app/.test(noscript.textContent)) { return { version: UNKNOWN_VERSION }; } return false; } } }; 

const thirdParties = [];
Object.entries(d41d8cd98f00b204e9800998ecf8427e_LibraryDetectorTests).forEach(([name, lib]) => {
	const result = lib.test(window);
	if (!result) {
		return;
	}

	const version = result.version || null;
	thirdParties.push({name, version});
});

return JSON.stringify(thirdParties);
